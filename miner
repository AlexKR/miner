#!/usr/bin/php
<?php
echo "######################\n";
echo "# Arionum Miner v0.1 #\n";
echo "# www.arionum.com    #\n";
echo "######################\n\n";
error_reporting(0);
if (!extension_loaded("gmp")) die("gmp php extension missing");
if(floatval(phpversion())<7.1) api_err("The minimum php version required is 7.1");

ini_set("memory_limit","5G");

$node=trim($argv[1]);
$public_key=trim($argv[2]);
$private_key=trim($argv[3]);
if(empty($node)||empty($public_key)||empty($private_key)) die("Usage: ./miner <node> <public_key> <private_key>\n");


class Miner {
    private $public_key;
    private $private_key;
	private $speed;
	private $node;
	private $block;
	private $difficulty;
	private $counter;
	public function prepare($pub, $priv, $node){
				$this->public_key=$pub;
		                $this->private_key=$priv;
				$this->node=$node;
				
	}

	public function update(){
		echo "--> Updating mining info\n";
		 $res=file_get_contents($this->node."/mine.php?q=info");
        	 $info=json_decode($res,true);
       		 if($info['status']!="ok") return false;
		$data=$info['data'];
		$this->block=$data['block'];
		$this->difficulty=$data['difficulty'];
		return true;
	}
	private function submit($nonce,$argon){

		$argon=substr($argon,29);
		echo "--> Submitting nonce $nonce / $argon\n";

		


		$postdata = http_build_query(
			array(
				'argon' => $argon,
				'nonce' => $nonce,
				'private_key' => $this->private_key,
				'public_key' => $this->public_key
			)
		);
		
		$opts = array('http' =>
			array(
				'method'  => 'POST',
				'header'  => 'Content-type: application/x-www-form-urlencoded',
				'content' => $postdata
			)
		);
		
		$context  = stream_context_create($opts);
		
		$res = file_get_contents($this->node."/mine.php?q=submitNonce", false, $context);

		$data=json_decode($res,true);
		
		if($data['status']=="ok") echo "\n--> Nonce confirmed. Block mined.\n";
		else echo "--> The nonce did not confirm.\n\n";
		
	}
	public function run(){
		$it=0;
		$start=microtime(true);
		while(1){
		$this->counter++;
		if($this->counter==1000) {
			echo "--> Hash rate: ".$this->speed." H/s\n";
			$this->update();
			$this->counter=0;
		}
	        $nonce=base64_encode(openssl_random_pseudo_bytes(32));
        	$nonce = preg_replace("/[^a-zA-Z0-9]/", "", $nonce);
			$base=$this->public_key."-".$nonce."-".$this->block."-".$this->difficulty;
			$argon=password_hash($base, PASSWORD_ARGON2I, array('memory_cost' => 16384, "time_cost"=>4, "threads"=>4));
			$hash=$base.$argon;
			for($i=0;$i<5;$i++){
				$hash=hash("sha512",$hash,true);
			}		
			$hash=hash("sha512",$hash);
			

			$m=str_split($hash,2);

			$duration=hexdec($m[10]).hexdec($m[15]).hexdec($m[20]).hexdec($m[23]).hexdec($m[31]).hexdec($m[40]).hexdec($m[45]).hexdec($m[55]);
			$duration=ltrim($duration, '0');
						
			$result=gmp_div($duration,$this->difficulty);
	
			if($result>0&&$result<=240){ 
				
				$this->submit($nonce,$argon);		
				
			}
			$it++;
			if($it==100){ 
				$it=0;
				$end=microtime(true);
				$this->speed=100/($end-$start);
				$start=$end;
			}
			
		}

	}	


}





$miner= new Miner;
$miner->prepare($public_key,$private_key, $node);
$res=$miner->update();
if(!$res) die("ERROR: Could not get mining info frm the node");

$miner->run();


?>
